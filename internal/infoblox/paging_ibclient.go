package infoblox

/*
Copyright 2024 The external-dns-infoblox-webhook Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"fmt"
	"reflect"

	"github.com/AbsaOSS/external-dns-infoblox-webhook/internal/metrics"
	ibclient "github.com/infobloxopen/infoblox-go-client/v2"
)

func PagingGetObject[T any](
	c ibclient.IBConnector,
	obj ibclient.IBObject,
	ref string,
	queryParams map[string]string,
	res *[]T,
) (err error) {

	pagingResponse := pagingResponseStruct[T]{
		NextPageId: "",
		Result:     make([]T, 0),
	}

	//copy query params and update them
	queryParamsCopy := map[string]string{}
	for k, v := range queryParams {
		queryParamsCopy[k] = v
	}

	queryParamsCopy["_return_as_object"] = "1"
	queryParamsCopy["_paging"] = "1"
	queryParamsCopy["_max_results"] = "1000"

	err = c.GetObject(obj, "", ibclient.NewQueryParams(false, queryParamsCopy), &pagingResponse)
	if err != nil {
		metrics.FailedApiCallsTotal.Inc()
		return fmt.Errorf("could not fetch object: %s", err)
	} else {
		*res = append(*res, pagingResponse.Result...)
	}

	for {
		if pagingResponse.NextPageId == "" {
			return
		}
		queryParamsCopy["_page_id"] = pagingResponse.NextPageId
		pagingResponse.NextPageId = ""
		pagingResponse.Result = make([]T, 0)
		err = c.GetObject(obj, "", ibclient.NewQueryParams(false, queryParamsCopy), &pagingResponse)
		metrics.TotalApiCalls.Inc()
		if err != nil {
			return fmt.Errorf("could not fetch object: %s", err)
		}

		*res = append(*res, pagingResponse.Result...)
		fmt.Print(fmt.Sprintln("Paging to retrieve", reflect.TypeOf(obj), len(*res)))
	}
}

type pagingResponseStruct[T any] struct {
	NextPageId string `json:"next_page_id,omitempty"`
	Result     []T    `json:"result,omitempty"`
}
